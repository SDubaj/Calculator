{"version":3,"sources":["components/Display.js","components/Button.js","components/Panel.js","components/Operate.js","components/Calculate.js","components/App.js","serviceWorker.js","index.js"],"names":["Display","className","this","props","total","Component","Button","handleClick","clickHandler","name","class","onClick","Panel","buttonName","operate","firstNumber","secondNumber","operation","one","Big","two","plus","toString","minus","parseInt","alert","div","times","Error","calculate","object","isNumber","test","console","log","next","App","state","setState","handleEqual","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d347020.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass Display extends Component {\r\n    render(){\r\n    return (\r\n      <div className=\"container-display\">\r\n      {this.props.total}\r\n      </div>\r\n    );\r\n  }\r\n  }\r\nexport default Display;","import React,{Component} from 'react';\r\n\r\nclass Button extends Component {\r\n\r\n  handleClick = () => {\r\n    this.props.clickHandler(this.props.name);\r\n  };\r\n\r\n    render(){\r\n    return (\r\n      <div className={\"container-button \" + this.props.class} >\r\n      <button onClick={this.handleClick}>{this.props.name}</button> \r\n      </div>\r\n    );\r\n  }\r\n  }\r\nexport default Button;","import React,{Component} from 'react';\r\nimport Button from './Button';\r\n\r\nclass Panel extends Component {\r\n\r\n  handleClick = buttonName => {\r\n    this.props.clickHandler(buttonName);\r\n  };\r\n\r\n    render(){\r\n    return (\r\n      <div className=\"container-panel\">\r\n      <div >\r\n       <Button name=\"AC\" clickHandler={this.handleClick} />\r\n       <Button name=\"+/-\" clickHandler={this.handleClick}/>\r\n       <Button name=\"%\" clickHandler={this.handleClick}/>\r\n       <Button name=\"/\"clickHandler={this.handleClick} class =\"orange\"/>\r\n      </div>\r\n      <div >\r\n      <Button name=\"7\" clickHandler={this.handleClick}/>\r\n      <Button name=\"8\"clickHandler={this.handleClick} />\r\n      <Button name=\"9\" clickHandler={this.handleClick}/>\r\n      <Button name=\"X\" clickHandler={this.handleClick} class =\"orange\" />\r\n     </div>\r\n     <div >\r\n     <Button name=\"4\" clickHandler={this.handleClick}/>\r\n     <Button name=\"5\" clickHandler={this.handleClick}/>\r\n     <Button name=\"6\" clickHandler={this.handleClick} />\r\n     <Button name=\"-\" clickHandler={this.handleClick} class =\"orange\"/>\r\n    </div>\r\n    <div >\r\n    <Button name=\"1\" clickHandler={this.handleClick}/>\r\n    <Button name=\"2\" clickHandler={this.handleClick}/>\r\n    <Button name=\"3\" clickHandler={this.handleClick}/>\r\n    <Button name=\"+\" clickHandler={this.handleClick} class =\"orange\" />\r\n   </div>\r\n   <div >\r\n   <Button name=\"0\" clickHandler={this.handleClick} class =\"wide\" />\r\n   <Button name=\",\" clickHandler={this.handleClick} />\r\n   <Button name=\"=\" clickHandler={this.handleClick} class =\"orange\"/>\r\n  </div>\r\n  </div>\r\n    );\r\n  }\r\n  }\r\nexport default Panel;","import Big from 'big.js';\r\n\r\nexport default function operate (firstNumber,secondNumber, operation) {\r\n    const one = Big(firstNumber)\r\n    const two = Big(secondNumber)\r\n    if(operation === \"+\"){\r\n        return one.plus(two).toString();\r\n    }\r\n    if(operation === \"-\"){\r\n        return one.minus(two).toString();\r\n    }\r\n    if(operation === \"/\"){\r\n        if(parseInt(two) === 0){\r\n            alert(\"error\");\r\n            return 0;\r\n        }\r\n         return one.div(two).toString();\r\n    }\r\n    if(operation === \"X\"){\r\n         return one.times(two).toString();\r\n    }\r\n    throw Error(`Unknown operation '${operation}'`);\r\n}","import operate from './Operate';\r\nimport Big from 'big.js';\r\nexport default function calculate (object,buttonName) {\r\n    const isNumber = (buttonName) =>{\r\n        return /[0-9]/.test(buttonName);\r\n    }\r\n    console.log(isNumber(buttonName));\r\n    if(buttonName === \"AC\" ){\r\n        return {\r\n            total:null,\r\n            next:null,\r\n            operation:null\r\n        }\r\n    }\r\n\r\n    if(isNumber(buttonName)){\r\n        if(object.operation){\r\n            if(object.next){\r\n                return {next:object.next+buttonName}\r\n            }\r\n            return {next:buttonName} \r\n        }\r\n        if (object.next) {\r\n            \r\n            const next = object.next === \"0\" ? buttonName : object.next + buttonName;\r\n            return {\r\n              next,\r\n              total: null,\r\n            };\r\n          }\r\n          return {\r\n            next: buttonName,\r\n            total: null,\r\n          };\r\n        }/* after pressing ,  */\r\n        if (buttonName === \",\") {\r\n            if ( object.next) {\r\n              \r\n              return {\r\n                \r\n                next: object.next + \".\",\r\n                \r\n              };\r\n            }\r\n           \r\n        }\r\n        /* @@@@@* */\r\n        /* after pressing %  */\r\n        if (buttonName === \"%\") {\r\n            if (object.operation && object.next) {\r\n              const result = operate(object.total, object.next, object.operation);\r\n              return {\r\n                total: result.div(100).toString(),\r\n                next: null,\r\n                operation: null,\r\n              };\r\n            }\r\n            if (object.next) {\r\n              return {\r\n                next: Big(object.next).div(100).toString(),\r\n              };\r\n            }\r\n            if (object.total) {\r\n                return {\r\n                  total:Big(object.total).div(100).toString(),\r\n                };\r\n              }\r\n            return {};\r\n          }\r\n\r\n        /* @@@@@* */\r\n        /* after pressing =  */\r\n        if(buttonName === \"=\"){\r\n            if(object.operation && object.next){\r\n            return  {\r\n               total:operate(object.total, object.next, object.operation),\r\n                next:null,\r\n                operation:null\r\n            }\r\n        }\r\n    }\r\n\r\n        /* @@@@@* */\r\n        if (!object.next) {\r\n            return { operation: buttonName };\r\n          }\r\n        \r\n          // save the operation and shift 'next' into 'total'\r\n          return {\r\n            total: object.next,\r\n            next: null,\r\n            operation: buttonName,\r\n          };\r\n    }\r\n","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport Display from './Display';\r\nimport Panel from './Panel';\r\nimport calculate from './Calculate';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    total: 0,\r\n    next: null,\r\n    operation: null,\r\n  };\r\n\r\n  handleClick = buttonName => {\r\n    console.log(buttonName);\r\n    this.setState (calculate(this.state, buttonName));\r\n  };\r\n\r\n  handleEqual = () => {\r\n     \r\n  }\r\n  render(){\r\n    console.log(this.state.operation + \" next:\" + this.state.next + \" total:\" + this.state.total);\r\n  return (\r\n    <div className=\"container\">\r\n      <Display total={this.state.next || this.state.total || \"0\"}/>\r\n      <Panel clickHandler={this.handleClick}/>\r\n\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}